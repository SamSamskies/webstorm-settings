<templateSet group="JavaScript">
  <template name="jpp" value="console.log('$VAR$', JSON.stringify($VAR$, null, 2));" description="Pretty print JSON" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="''" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="log" value="console.log('$VAR$', $VAR$);" description="console.log shortcut" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="fsc" value="import React, { PropTypes } from 'react'&#10;&#10;const $VAR$ = () =&gt; (&#10;&#10;)&#10;&#10;$VAR$.propTypes = {&#10;}&#10;&#10;export default $VAR$" description="React functional stateless component" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="rcls" value="import PropTypes from 'prop-types'&#10;import React, { Component } from 'react'&#10;&#10;class $COMPONENT$ extends Component {&#10;  render() {&#10;    return (&#10;      &lt;div&gt;$END$&lt;/div&gt;&#10;    )&#10;  }&#10;}&#10;&#10;$COMPONENT$.propTypes = {}&#10;$COMPONENT$.defaultProps = {}&#10;&#10;export default $COMPONENT$" description="React class" toReformat="false" toShortenFQNames="true">
    <variable name="COMPONENT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="container" value="import React, { Component, PropTypes } from 'react'&#10;import { connect } from 'react-redux'&#10;import { bindActionCreators } from 'redux'&#10;&#10;class $COMPONENT$ extends Component {&#10;&#10;  render () {&#10;  }&#10;}&#10;&#10;$COMPONET$.propTypes = {&#10;}&#10;&#10;function mapStateToProps(state) {&#10;  return {}&#10;}&#10;&#10;function mapDispatchToProps (dispatch) {&#10;  return {&#10;    actions: bindActionCreators({}, dispatch)&#10;  }&#10;}&#10;&#10;export default connect(&#10;  mapStateToProps,&#10;  mapDispatchToProps&#10;)($COMPONENT$)" description="React container" toReformat="false" toShortenFQNames="true">
    <variable name="COMPONENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="COMPONET" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="reducer" value="const initialState = {&#10;}&#10;&#10;export default function reducer (state = initialState, action = {}) {&#10;  return handlers[action.type]&#10;    ? handlers[action.type](state, action.payload)&#10;    : state&#10;}&#10;&#10;const handlers = {&#10;}&#10;&#10;/**&#10; * Action Creators&#10; */&#10;&#10;/**&#10; * Selectors&#10; */" description="Redux reducer" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="spec" value="import '../../config'&#10;import { expect } from 'chai'&#10;import sinon from 'sinon'&#10;let sandbox&#10;&#10;describe('$MODULE_NAME$', () =&gt; {&#10;  beforeEach(() =&gt; {&#10;    sandbox = sinon.sandbox.create()&#10;  })&#10;&#10;  afterEach(() =&gt; {&#10;    sandbox.restore()&#10;  })&#10;&#10;  &#10;})&#10;&#10;" description="Mocha test skeleton" toReformat="false" toShortenFQNames="true">
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>